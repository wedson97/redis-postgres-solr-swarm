version: "3.9"

services:
  flask-app:
    image: python:3.9-slim
    networks:
      - global
    volumes:
      - ./backend:/app
    working_dir: /app
    command: >
      sh -c "pip install -r requirements.txt && flask run --host=0.0.0.0 --port=5000"
    ports:
      - "5000:5000"
    deploy:
      mode: replicated
      replicas: 4  # Distribui entre os 4 EC2
      placement:
        max_replicas_per_node: 1  # Garante que cada EC2 tenha 1 instância
      restart_policy:
        condition: on-failure

  postgres:
    image: postgres:latest
    networks:
      - global
    environment:
      POSTGRES_DB: cbo_ocupacao
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    deploy:
      replicas: 1  # Banco deve rodar em apenas 1 EC2
      placement:
        constraints:
          - node.role == manager  # Banco fica no Manager Node

  redis:
    image: redis:latest
    networks:
      - global
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager  # Redis no Manager Node

  solr:
    image: solr:latest
    networks:
      - global
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager  # Solr no Manager Node

  traefik:
    image: traefik:v2.9
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"  # Load Balancer na porta 80
      - "8080:8080"  # Dashboard do Traefik
    networks:
      - global
    deploy:
      mode: global  # Roda em todas as instâncias EC2

networks:
  global:
    driver: overlay
